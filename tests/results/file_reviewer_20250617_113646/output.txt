**Node.js Authentication API Module Documentation**\n\n**Overview**\n\nThe Node.js authentication API module provides a robust authentication system for user registration, login, and token refresh functionality. This module is designed to handle rate limiting and ensures secure authentication flows.\n\n**API Endpoints**\n\n### User Registration\n\n* **POST /register**\n\t+ Request Body:\n\t\t- `username` (string): Unique username for the user.\n\t\t- `email` (string): Email address associated with the user.\n\t\t- `password` (string): Password for the user.\n\t+ Response: `201 Created`\n\t\t- `{ \"token\": string }`: Authentication token for the newly created user.\n\n### User Login\n\n* **POST /login**\n\t+ Request Body:\n\t\t- `username` (string): Username of the user attempting to log in.\n\t\t- `password` (string): Password of the user attempting to log in.\n\t+ Response: `200 OK`\n\t\t- `{ \"token\": string }`: Authentication token for the logged-in user.\n\t+ Response: `429 Too Many Requests` (rate limiting exceeded)\n* **GET /login**\n\t+ Request Query Parameters:\n\t\t- `refresh_token` (string): Refresh token for an existing authentication session.\n\t+ Response: `200 OK`\n\t\t- `{ \"token\": string }`: Authentication token for the logged-in user.\n\n### Token Refresh\n\n* **POST /refresh-token**\n\t+ Request Body:\n\t\t- `refresh_token` (string): Refresh token for an existing authentication session.\n\t+ Response: `200 OK`\n\t\t- `{ \"token\": string }`: Authentication token for the refreshed user session.\n\n**Authentication Flow**\n\n1. User registration: The user submits a registration request with a unique username, email address, and password. The API creates a new user account and returns an authentication token.\n2. User login: The user submits a login request with their username and password. If the credentials are valid, the API returns an authentication token.\n3. Token refresh: The user submits a refresh token request to obtain a new authentication token for their existing session.\n\n**Security Considerations**\n\n* **Rate Limiting**: The API enforces rate limiting on login requests to prevent brute-force attacks. The rate limit is set at 5 attempts per minute.\n* **Password Hashing**: Passwords are hashed using the bcrypt algorithm to ensure secure storage and comparison.\n* **Token Validation**: Authentication tokens are validated using JSON Web Tokens (JWT) to ensure their integrity and authenticity.\n\n**Usage Examples**\n\n### Registering a New User\n\n```bash\ncurl -X POST \\\n  http://localhost:3000/register \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"username\": \"johnDoe\", \"email\": \"johndoe@example.com\", \"password\": \"mysecretpassword\