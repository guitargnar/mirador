#!/bin/bash

# Mirador-EZ Command Wrapper
# Provides easy access to Mirador AI orchestration system

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MIRADOR_DIR="$HOME/ai_framework_git"
MIRADOR_PYTHON="$MIRADOR_DIR/mirador.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}$1${NC}"
}

print_success() {
    echo -e "${GREEN}$1${NC}"
}

print_warning() {
    echo -e "${YELLOW}$1${NC}"
}

print_error() {
    echo -e "${RED}$1${NC}"
}

# Check if Mirador is properly installed
check_mirador_installation() {
    if [ ! -f "$MIRADOR_PYTHON" ]; then
        print_error "‚ùå Mirador not found at $MIRADOR_PYTHON"
        print_error "Please run the installation script first."
        exit 1
    fi
    
    if [ ! -x "$MIRADOR_PYTHON" ]; then
        print_error "‚ùå Mirador script is not executable"
        chmod +x "$MIRADOR_PYTHON"
        print_success "‚úÖ Fixed permissions"
    fi
}

# Function to show usage
show_usage() {
    echo -e "${CYAN}üé≠ Mirador AI Orchestration System${NC}"
    echo "=================================="
    echo ""
    echo "Usage: mirador-ez <command> [options]"
    echo ""
    echo "Commands:"
    echo "  ask <model> <prompt>     Query a single specialist model"
    echo "  chain <prompt> [models]  Execute intelligent model chain"
    echo "  status                   Check system status and health"
    echo "  models                   List available models"
    echo "  help                     Show this help message"
    echo ""
    echo "Examples:"
    echo "  mirador-ez ask matthew_context_provider_v2 \"What should I focus on today?\""
    echo "  mirador-ez chain \"Investment opportunities this week\""
    echo "  mirador-ez chain \"Career strategy\" matthew_context_provider_v2 enhanced_agent_enforcer_v2"
    echo "  mirador-ez status"
    echo ""
    echo "For detailed documentation, see: $MIRADOR_DIR/README.md"
}

# Function to list available models
list_models() {
    print_status "ü§ñ Available Mirador Models:"
    echo "============================="
    
    if command -v ollama &> /dev/null; then
        if ollama list &> /dev/null; then
            echo ""
            ollama list | grep -E "(matthew_context|enhanced_agent|decision_simplifier|financial_planning|louisville_expert|mirador_system)" | while read line; do
                model_name=$(echo "$line" | awk '{print $1}' | cut -d':' -f1)
                echo "‚úÖ $model_name"
            done
            echo ""
        else
            print_error "‚ùå Ollama service not running"
            print_warning "Start with: ollama serve"
        fi
    else
        print_error "‚ùå Ollama not installed"
    fi
}

# Function to execute ask command
execute_ask() {
    local model="$1"
    local prompt="$2"
    
    if [ -z "$model" ] || [ -z "$prompt" ]; then
        print_error "‚ùå Usage: mirador-ez ask <model> <prompt>"
        echo ""
        echo "Available models:"
        list_models
        exit 1
    fi
    
    print_status "üîç Querying $model..."
    echo ""
    
    python3 "$MIRADOR_PYTHON" ask "$model" "$prompt"
}

# Function to execute chain command
execute_chain() {
    local prompt="$1"
    shift
    local models=("$@")
    
    if [ -z "$prompt" ]; then
        print_error "‚ùå Usage: mirador-ez chain <prompt> [models...]"
        echo ""
        echo "Examples:"
        echo "  mirador-ez chain \"Financial planning advice\""
        echo "  mirador-ez chain \"Career strategy\" matthew_context_provider_v2 enhanced_agent_enforcer_v2"
        exit 1
    fi
    
    if [ ${#models[@]} -eq 0 ]; then
        print_status "üß† Using intelligent chain selection..."
    else
        print_status "üîó Using custom chain: ${models[*]}"
    fi
    
    echo ""
    
    if [ ${#models[@]} -eq 0 ]; then
        python3 "$MIRADOR_PYTHON" chain "$prompt"
    else
        python3 "$MIRADOR_PYTHON" chain "$prompt" "${models[@]}"
    fi
}

# Function to show system status
show_status() {
    print_status "üîç Mirador System Status"
    echo "========================"
    echo ""
    
    python3 "$MIRADOR_PYTHON" status
    
    echo ""
    print_status "üìÅ Recent Outputs:"
    if [ -d "$MIRADOR_DIR/outputs" ]; then
        ls -la "$MIRADOR_DIR/outputs" | tail -5
    else
        print_warning "No outputs directory found"
    fi
}

# Main command processing
main() {
    # Check installation first
    check_mirador_installation
    
    # Process commands
    case "$1" in
        "ask")
            execute_ask "$2" "$3"
            ;;
        "chain")
            shift
            execute_chain "$@"
            ;;
        "status")
            show_status
            ;;
        "models")
            list_models
            ;;
        "help"|"--help"|"-h"|"")
            show_usage
            ;;
        *)
            print_error "‚ùå Unknown command: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"

